/*
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.conjur.sdk.api;

import org.conjur.sdk.model.AuthenticatorStatus;
import org.conjur.sdk.model.AuthenticatorsResponse;
import org.conjur.sdk.model.WhoAmI;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StatusApi
 */
@Ignore
public class StatusApiTest {

    private final StatusApi api = new StatusApi();

    
    /**
     * Details about which authenticators are on the Conjur Server
     *
     * Response contains three members: installed, configured, and enabled.  installed: The authenticator is implemented in Conjur and is available for configuration configured: The authenticator has a webservice in the DB that was loaded by policy enabled: The authenticator is enabled (in the DB or in the ENV) and is ready for authentication 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthenticatorsTest() {
        String xRequestId = null;
        AuthenticatorsResponse response = api.getAuthenticators(xRequestId);

        // TODO: test validations
    }
    
    /**
     * Details whether an authentication service has been configured properly
     *
     * Once the status webservice has been properly configured and the relevant user groups have been given permissions to access the status webservice, the users in those groups can check the status of the authenticator.  This operation only supports the GCP authenticator  See [Conjur Documentation](https://docs.conjur.org/Latest/en/Content/Integrations/Authn-status.htm) for details on setting up the authenticator status webservice. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGCPAuthenticatorStatusTest() {
        String account = null;
        String xRequestId = null;
        AuthenticatorStatus response = api.getGCPAuthenticatorStatus(account, xRequestId);

        // TODO: test validations
    }
    
    /**
     * Details whether an authentication service has been configured properly
     *
     * Once the status webservice has been properly configured and the relevant user groups have been given permissions to access the status webservice, the users in those groups can check the status of the authenticator.  Supported Authenticators:   - Azure   - OIDC  Not Supported:   - AWS IAM   - Kubernetes   - LDAP  See [Conjur Documentation](https://docs.conjur.org/Latest/en/Content/Integrations/Authn-status.htm) for details on setting up the authenticator status webservice. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceAuthenticatorStatusTest() {
        String authenticator = null;
        String serviceId = null;
        String account = null;
        String xRequestId = null;
        AuthenticatorStatus response = api.getServiceAuthenticatorStatus(authenticator, serviceId, account, xRequestId);

        // TODO: test validations
    }
    
    /**
     * Provides information about the client making an API request.
     *
     * WhoAmI provides information about the client making an API request. It can be used to help troubleshoot configuration by verifying authentication and the client IP address for audit and network access restrictions. For more information, see Host Attributes. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void whoAmITest() {
        String xRequestId = null;
        WhoAmI response = api.whoAmI(xRequestId);

        // TODO: test validations
    }
    
}
